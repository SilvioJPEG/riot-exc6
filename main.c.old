#include <stdio.h>
#include <ctype.h>

#include "board.h"
#include "periph/gpio.h"
#include "xtimer.h"

#define N -1
#define P 0
#define D 1

#define DOT 500 // ms
#define DASH 3*DOT
#define LETTERS_SPACE DOT*3


int codes[128][5] = {
    {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, 
    {P, D, N, N, N}, // A 65
    {D, P, P, P, N}, // B
    {D, P, D, P, N}, // C
    {D, P, P, N, N}, // D
    {P, N, N, N, N}, // E
    {P, P, D, P, N}, // F
    {D, D, P, N, N}, // G
    {P, P, P, P, N}, // H
    {P, P, N, N, N}, // I
    {P, D, D, D, N}, // J
    {D, P, D, N, N}, // K
    {P, D, P, P, N}, // L
    {D, D, N, N, N}, // M
    {D, P, N, N, N}, // N
    {D, D, D, N, N}, // O
    {P, D, D, P, N}, // P
    {D, D, P, D, N}, // Q
    {P, D, P, N, N}, // R
    {P, P, P, N, N}, // S
    {D, N, N, N, N}, // T
    {P, P, D, N, N}, // U
    {P, P, P, D, N}, // V
    {P, D, D, N, N}, // W
    {D, P, P, D, N}, // X
    {D, P, D, D, N}, // Y
    {D, D, P, P, N}, // Z
};

void printDot(void);

void printDash(void);

void printLetter(char l);


int main(void) {
    // -1 = nothing,
    // 0 = dot
    // 1 = dash

    printf("Hello\n");
    
    char str[] = "Helloworld";
    gpio_init(LED0_PIN, GPIO_OUT);
    while(1) {
        printf("Main loop\n");
        int str_len = (int)(sizeof(str)/sizeof(char));
        printf("String len: %d\n", str_len);
        for (int i = 0; i < str_len; i++) {
            printf("%c ", str[i]);
            printLetter(str[i]);
            printf("\n");
        }
        xtimer_sleep(5000);
    }

    return 0;
}

void printDot(void) {
    gpio_set(LED0_PIN);
    xtimer_msleep(DOT);
    gpio_clear(LED0_PIN);
}

void printDash(void) {
    gpio_set(LED0_PIN);
    xtimer_msleep(DASH);
    gpio_clear(LED0_PIN);
}

void printLetter(char l) {
    for (int i = 0; i < 5; i++) {
        char upper = toupper(l);
        int code = codes[(int)upper][i];
        if (code == P) {
            printDot();
            printf(".\n");
        }
        if (code == D) {
            printDash();
            printf("-\n");
        }
        if (i < 4 && codes[(int)l][i] != N) {
            xtimer_msleep(DOT);
        }
        else break;
    }

    xtimer_msleep(LETTERS_SPACE);
}
